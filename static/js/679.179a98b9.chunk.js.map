{"version":3,"file":"static/js/679.179a98b9.chunk.js","mappings":"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","sources":["webpack://react_project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Message/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","webpack://react_project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react_project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react_project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/WithAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__hz+DW\",\"dialogsItems\":\"Dialogs_dialogsItems__MgQPf\",\"active\":\"Dialogs_active__9zRhx\",\"messages\":\"Dialogs_messages__0KmtU\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default DialogItem","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message","import {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../common/formsControls/formsControls\";\r\nimport {maxLenghtCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nconst AddMessageForm = (props) => {\r\n    let maxLenght50= maxLenghtCreator(50);\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name=\"newMessageBody\"\r\n                    placeholder=\"Write a message\"\r\n                    validate={[required, maxLenght50]} />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'dialog-add-message-form'})(AddMessageForm)\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageFormRedux from \"./Message/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        //alert(values.newMessageBody);\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n\r\n            < div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","// import React from \"react\";\r\n// import s from \"./Dialogs.module.css\"\r\n// import DialogItem from './DialogItem/DialogItem'\r\n// import Message from \"./Message/Message\";\r\n// import {type} from \"@testing-library/user-event/dist/type\";\r\n\r\nimport React from \"react\";\r\nimport {sendMessageActionCreator} from \"../../redux/dialogsPageReduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ProfileContainer} from \"../Profile/ProfileContainer\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//\r\n//     let state = props.store.getState().dialogsPage\r\n//\r\n//     let onSendMessageClick = () => {\r\n//         props.store.dispatch(sendMessageActionCreator());\r\n//\r\n//     }\r\n//\r\n//     let onNewMessageChange = (body) => {\r\n//         props.store.dispatch(updateNewMessageBodyActionCreator(body));\r\n//\r\n//     }\r\n//\r\n//     return (\r\n//         <Dialogs updateNewMessageBody={onNewMessageChange} sendMessage={onSendMessageClick}\r\n//                  dialogsPage={props.dialogsPage}/>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n       sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__MW4Z7\",\"wallpaper\":\"ProfileInfo_wallpaper__jdShW\",\"mainPhoto\":\"ProfileInfo_mainPhoto__oJMDt\",\"contact\":\"ProfileInfo_contact__DC-By\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <> {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}><b>Status</b>: {props.status || \"NoStatus\"}</span>\r\n            </div>\r\n        }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deActivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, TextArea} from \"../../common/formsControls/formsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\n\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n        </div>\r\n        <div>\r\n            <b>Full Name</b>: {createField(\"Full Name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], TextArea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField(\"About me\", \"aboutMe\", [], TextArea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key=> {\r\n                return <div className={s.contact}>\r\n                    <b>{key}:</b>{createField(`${key}`, `contacts.${key}`, [], Input)}\r\n                </div>;\r\n        })}\r\n        </div>\r\n\r\n    </form>\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user_png.webp\";\r\nimport {getFormValues, reduxForm} from \"redux-form\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile, ...props}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelectedOn = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData)\r\n        setEditMode(false)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"Profile\"/>\r\n                    {isOwner && (\r\n                        <div>\r\n                            <input\r\n                                type=\"file\"\r\n                                id=\"file-input\"\r\n                                className={s.fileInput}\r\n                                onChange={mainPhotoSelectedOn}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm  initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    :\r\n                    <ProfileData profile={profile} goToEditMode={()=> {setEditMode(true)}} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({isOwner, profile, goToEditMode})=> {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob && (\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        )}\r\n        <div>\r\n            <b>Full Name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts)\r\n            .map(key => {\r\n                return <Contact contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__m0ifO\",\"posts\":\"MyPosts_posts__oo0KL\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__sYnAs\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://sun1-86.userapi.com/s/v1/ig2/ZhLmYDSCxYUnlJPfApyGwHjUYUwSMfqqD8XWKDuA0z-YnFG3IMWpP4BeUgarc_EP9-dg5d9u0W812ffmiD3HEfZd.jpg?size=400x400&quality=95&crop=228,2,440,440&ava=1'\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLenghtCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/formsControls/formsControls\";\r\n// import {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profilePageReduser\";\r\n\r\nconst maxLenght10 = maxLenghtCreator(10)\r\n\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={TextArea} placeholder={'Enter your message'}\r\n                       validate={[required, maxLenght10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nlet SuperAddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        < div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <SuperAddNewPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts\r\n","import {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profilePageReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// const MyPostsContainer = (props) => {\r\n//\r\n//     let state = props.store.getState()\r\n//\r\n//     let addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator());\r\n//     }\r\n//\r\n//     let onPostChange = (text) => {\r\n//         let action = updateNewPostTextActionCreator(text)\r\n//         props.store.dispatch(action)\r\n//     }\r\n//     return (\r\n//         <MyPosts updateNewPostText={onPostChange} addPost={addPost}\r\n//                  posts = {state.profilePage.posts}\r\n//                  newPostText = {state.profilePage.newPostText}\r\n//         />)\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from \"react\";\r\nimport './Profile.css';\r\n\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    if (!props.profile) {\r\n        return <div>Loading...</div>;\r\n    }\r\nreturn (\r\n<main>\r\n    <ProfileInfo savePhoto={props.savePhoto}\r\n                 isOwner={props.isOwner}\r\n                 profile={props.profile}\r\n                 status={props.status}\r\n                 updateStatus={props.updateStatus}\r\n                 saveProfile={props.saveProfile}\r\n    />\r\n    <MyPostsContainer />\r\n\r\n</main>\r\n)\r\n}\r\n\r\nexport  default Profile\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profilePageReduser\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { WithAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    });\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer);\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let СonnectedAuthRedirectComponent=connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return СonnectedAuthRedirectComponent\r\n}\r\n\r\n"],"names":["props","_jsx","className","s","dialog","active","children","NavLink","to","id","name","message","reduxForm","form","maxLenght50","maxLenghtCreator","_jsxs","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","isAuth","dialogsItems","AddMessageFormRedux","values","sendMessage","newMessageBody","Redirect","compose","connect","dispatch","sendMessageActionCreator","WithAuthRedirect","Dialogs","editMode","setEditMode","useState","status","setStatus","useEffect","_Fragment","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deActivateEditMode","updateStatus","_ref","profile","createField","Input","type","Object","keys","contacts","key","contact","concat","ProfileData","_ref2","isOwner","goToEditMode","onClick","lookingForAJob","lookingForAJobDescription","fullName","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","fileInput","target","files","length","ProfileDataForm","initialValues","formData","ProfileStatusWithHooks","likesCount","maxLenght10","SuperAddNewPostForm","React","postsElements","posts","p","Post","addPost","newPostText","profilePage","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","ProfileContainer","refreshProfile","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Profile","auth","withRouter","mapStateToPropsForRedirect","Component","RedirectComponent"],"sourceRoot":""}